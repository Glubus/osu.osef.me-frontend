#!/bin/bash

# Script de d√©ploiement pour osu.osef.me-frontend
# D√©ploie vers debian@51.38.149.239 dans ~/web

set -e  # Arr√™ter le script en cas d'erreur

echo "üöÄ D√©but du d√©ploiement..."

# Variables
REMOTE_USER="debian"
REMOTE_HOST="51.38.239.149"
REMOTE_DIR="~/web"
LOCAL_BUILD_DIR="dist"

# Demander le mot de passe SSH
echo -n "üîê Entrez le mot de passe SSH pour $REMOTE_USER@$REMOTE_HOST: "
read -s SSH_PASSWORD
echo

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages color√©s
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier que pnpm est install√©
if ! command -v pnpm &> /dev/null; then
    print_error "pnpm n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# V√©rifier que sshpass est install√©
if ! command -v sshpass &> /dev/null; then
    print_error "sshpass n'est pas install√©. Veuillez l'installer avec: sudo apt install sshpass"
    exit 1
fi

# Nettoyer et installer les d√©pendances
print_status "Installation des d√©pendances..."
pnpm install

# Construire le projet
print_status "Construction du projet..."
pnpm run build

# V√©rifier que le build a r√©ussi
if [ ! -d "$LOCAL_BUILD_DIR" ]; then
    print_error "Le dossier de build '$LOCAL_BUILD_DIR' n'existe pas. La construction a √©chou√©."
    exit 1
fi

# Cr√©er une archive du build
ARCHIVE_NAME="osu-frontend-$(date +%Y%m%d-%H%M%S).tar.gz"
print_status "Cr√©ation de l'archive: $ARCHIVE_NAME"
tar -czf "$ARCHIVE_NAME" -C "$LOCAL_BUILD_DIR" .

# Transf√©rer l'archive vers le serveur
print_status "Transfert vers $REMOTE_USER@$REMOTE_HOST..."
sshpass -p "$SSH_PASSWORD" scp "$ARCHIVE_NAME" "$REMOTE_USER@$REMOTE_HOST:/tmp/"

# D√©ployer sur le serveur
print_status "D√©ploiement sur le serveur..."
sshpass -p "$SSH_PASSWORD" ssh "$REMOTE_USER@$REMOTE_HOST" << EOF
    set -e
    
    echo "üì¶ Extraction de l'archive..."
    cd ~
    
    # Cr√©er le dossier web s'il n'existe pas
    mkdir -p web
    
    # Sauvegarder l'ancienne version si elle existe
    if [ -d "web/current" ]; then
        echo "üíæ Sauvegarde de l'ancienne version..."
        mv web/current web/backup-\$(date +%Y%m%d-%H%M%S)
    fi
    
    # Cr√©er le nouveau dossier
    mkdir -p web/current
    
    # Extraire la nouvelle version
    tar -xzf /tmp/$ARCHIVE_NAME -C web/current/
    
    # Nettoyer l'archive temporaire
    rm /tmp/$ARCHIVE_NAME
    
    # Cr√©er un lien symbolique si n√©cessaire
    if [ ! -L "web/latest" ]; then
        ln -sf current web/latest
    else
        ln -sfn current web/latest
    fi
    
    echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
    echo "üìÅ Nouvelle version disponible dans: ~/web/current"
    echo "üîó Lien symbolique: ~/web/latest"
EOF

# Nettoyer l'archive locale
rm "$ARCHIVE_NAME"

print_status "D√©ploiement termin√© avec succ√®s! üéâ"
print_status "Application d√©ploy√©e dans: $REMOTE_USER@$REMOTE_HOST:$REMOTE_DIR/current"
